/*********************************************************************
 * DATASET VIBESTREAM
 *
 * Jalankan seluruh skrip ini SATU KALI di SQL Editor pada proyek
 * Supabase baru Anda untuk mengkonfigurasi semua yang dibutuhkan.
 *
 * Versi: 1.0
 *********************************************************************/

-- ========== BAGIAN 1: PEMBUATAN TABEL ==========

-- 1. Tabel Profil Pengguna
-- Menyimpan data publik pengguna yang terhubung ke sistem otentikasi Supabase.
CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  username TEXT,
  avatar_url TEXT,
  role TEXT NOT NULL DEFAULT 'user' -- Peran bisa: 'user', 'admin', 'owner'
);
COMMENT ON TABLE public.profiles IS 'Menyimpan data profil publik pengguna.';

-- 2. Tabel Musik
-- Menyimpan metadata untuk setiap lagu yang diunggah.
CREATE TABLE public.music (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  title TEXT NOT NULL,
  artist_name TEXT NOT NULL,
  uploader_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  file_path TEXT NOT NULL,
  cover_art_path TEXT,
  duration_seconds INT NOT NULL,
  status TEXT NOT NULL DEFAULT 'active', -- Status bisa: 'active', 'banned'
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.music IS 'Metadata untuk setiap lagu yang diunggah.';

-- 3. Tabel Playlist
-- Menyimpan informasi tentang playlist yang dibuat pengguna.
CREATE TABLE public.playlists (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  description TEXT,
  creator_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  visibility TEXT NOT NULL DEFAULT 'public', -- Visibilitas: 'public', 'private'
  cover_art_path TEXT, -- Akan diisi otomatis oleh trigger
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.playlists IS 'Playlist yang dibuat oleh pengguna, bisa publik atau privat.';

-- 4. Tabel Relasi Playlist-Musik (Many-to-Many)
-- Menghubungkan lagu ke dalam playlist.
CREATE TABLE public.playlist_music (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  playlist_id UUID NOT NULL REFERENCES public.playlists(id) ON DELETE CASCADE,
  music_id UUID NOT NULL REFERENCES public.music(id) ON DELETE CASCADE,
  added_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  -- Mencegah lagu yang sama ditambahkan dua kali ke playlist yang sama.
  UNIQUE(playlist_id, music_id)
);
COMMENT ON TABLE public.playlist_music IS 'Tabel penghubung antara musik dan playlist.';


-- ========== BAGIAN 2: FUNGSI DAN TRIGGER OTOMATIS ==========

-- 1. Fungsi untuk membuat profil baru secara otomatis saat user mendaftar.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  INSERT INTO public.profiles (id, username, avatar_url, role)
  VALUES (
    NEW.id,
    NEW.raw_user_meta_data ->> 'name',
    NEW.raw_user_meta_data ->> 'avatar_url',
    'user'
  );
  RETURN NEW;
END;
$$;

-- 2. Trigger yang memanggil fungsi handle_new_user.
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();
COMMENT ON TRIGGER on_auth_user_created ON auth.users IS 'Membuat entri profil saat user baru mendaftar.';

-- 3. Fungsi untuk mengupdate sampul playlist dengan gambar dari lagu pertama.
CREATE OR REPLACE FUNCTION public.update_playlist_cover_on_first_add()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  song_cover_path TEXT;
BEGIN
  IF (
    (SELECT cover_art_path FROM public.playlists WHERE id = NEW.playlist_id) IS NULL AND
    (SELECT count(*) FROM public.playlist_music WHERE playlist_id = NEW.playlist_id) = 1
  ) THEN
    SELECT cover_art_path INTO song_cover_path FROM public.music WHERE id = NEW.music_id;
    IF song_cover_path IS NOT NULL THEN
      UPDATE public.playlists
      SET cover_art_path = song_cover_path
      WHERE id = NEW.playlist_id;
    END IF;
  END IF;
  RETURN NEW;
END;
$$;

-- 4. Trigger yang memanggil fungsi update_playlist_cover.
CREATE TRIGGER on_first_song_add
  AFTER INSERT ON public.playlist_music
  FOR EACH ROW EXECUTE PROCEDURE public.update_playlist_cover_on_first_add();
COMMENT ON TRIGGER on_first_song_add ON public.playlist_music IS 'Mengatur sampul playlist saat lagu pertama ditambahkan.';


-- ========== BAGIAN 3: KEAMANAN (ROW LEVEL SECURITY) ==========

-- 1. Aktifkan RLS untuk semua tabel.
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.music ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.playlists ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.playlist_music ENABLE ROW LEVEL SECURITY;

/*
 * KEBIJAKAN UNTUK TABEL 'profiles'
 */
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles
  FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON public.profiles
  FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles
  FOR UPDATE USING (auth.uid() = id);

/*
 * KEBIJAKAN UNTUK TABEL 'music'
 */
CREATE POLICY "Music is viewable by all authenticated users." ON public.music
  FOR SELECT TO authenticated USING (true);
CREATE POLICY "Users can upload their own music." ON public.music
  FOR INSERT TO authenticated WITH CHECK (auth.uid() = uploader_id);
CREATE POLICY "Users can update their own music." ON public.music
  FOR UPDATE TO authenticated USING (auth.uid() = uploader_id);
CREATE POLICY "Users can delete their own music." ON public.music
  FOR DELETE TO authenticated USING (auth.uid() = uploader_id);

/*
 * KEBIJAKAN UNTUK TABEL 'playlists' (PALING PENTING)
 */
CREATE POLICY "Allow public read access and owner read access." ON public.playlists
  FOR SELECT TO authenticated USING ((visibility = 'public'::text) OR (creator_id = auth.uid()));
CREATE POLICY "Users can create their own playlists." ON public.playlists
  FOR INSERT TO authenticated WITH CHECK (creator_id = auth.uid());
CREATE POLICY "Users can update their own playlists." ON public.playlists
  FOR UPDATE TO authenticated USING (creator_id = auth.uid());
CREATE POLICY "Users can delete their own playlists." ON public.playlists
  FOR DELETE TO authenticated USING (creator_id = auth.uid());

/*
 * KEBIJAKAN UNTUK TABEL 'playlist_music'
 */
CREATE POLICY "Users can view songs in playlists they can access." ON public.playlist_music
  FOR SELECT TO authenticated USING (
    (SELECT count(*) FROM public.playlists WHERE id = playlist_id) > 0 -- Memeriksa apakah playlistnya bisa diakses (mengacu pada RLS playlist)
  );
CREATE POLICY "Playlist owners can add songs." ON public.playlist_music
  FOR INSERT TO authenticated WITH CHECK (
    (SELECT creator_id FROM public.playlists WHERE id = playlist_id) = auth.uid()
  );
CREATE POLICY "Playlist owners can remove songs." ON public.playlist_music
  FOR DELETE TO authenticated USING (
    (SELECT creator_id FROM public.playlists WHERE id = playlist_id) = auth.uid()
  );

-- ========== SELESAI ==========
-- Berhasil! Database VibeStream Anda sekarang sepenuhnya terkonfigurasi.